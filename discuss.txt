终极目的是产生一个Lua到节点类资源的共通措施

    首先就需要节点类资源的抽象：nui.h
    功能：
    1. 节点资源抽象
    2. 节点属性机制抽象
    3. 节点上附加的组件抽象
    4. 全局计时器
    5. 全局状态抽象（组件类型）

    Lua方面必须具有的功能：
    1. 创建节点、节点操作能力
    2. 访问节点属性，新建Lua节点属性
    3. 附加组件的能力，实现Lua组件能力
    4. 全局计时器操作能力
    5. Lua全局状态实现能力

节点生命周期：
1. 外界创建的节点，外界管理生命期
2. 外界暴露给Lua的节点，外界节点生命期完结的时候清理Lua资源
3. Lua创建的节点，Lua管理生命期，除非挂载到外界节点上
-. 外界节点生命周期：
    - 生成的时候拥有引用计数1，release则立即销毁
    - 挂载到其他节点下，则如果其他节点不销毁，则该节点生命期被忽略
    - 其他节点销毁，重新判断自己孩子生命期
    - 根节点永不销毁

Lua有一个节点缓存池，这个缓存池是特制的，应该需要静态缓存，所以lbind的缓存机制
其实是不需要的。

每个设置了环境的节点，都需要注册listener在离开的时候清除资源。

清理资源仅限有环境的节点。

在Lua中创建的节点肯定有环境。

目前问题：

1. attr的值交互问题：目前可能会被交互的值有这些：
    - Lua的基本值：nil，boolean，number，string
    - 暂时不知道怎么传递表，内存直接传递会很慢，需要一个规则
    - IUP的做法：只有数字，字符串，指针，其中指针不支持Lua访问
	- 和Lua的唯一交互方法是字符串，数字也是字符串的一种
	- 指针通常是函数指针，包装过的可以用，不然就用不了了


2. 采用隐藏状态还是显式状态？
    - 如果采用新的节点生命期管理，那么显式状态的delete也是没有问题的：因为可以
    delete掉Lua里面的节点。
